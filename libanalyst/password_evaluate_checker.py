# This file aims to evaluate the passwords generated by different models (mainly on Hit Rate and repeat rate).
'''
File này được viết để đánh giá các mật khẩu được tạo ra bởi các mô hình khác nhau (chủ yếu là tỷ lệ trúng và tỷ lệ lặp lại).
Nó sẽ đọc các mật khẩu từ một tệp đầu vào, phân tích chúng thành các phần tử mô tả kiểu ký tự và sau đó tính toán tỷ lệ trúng và tỷ lệ lặp lại của các mật khẩu được tạo ra.

'''
import argparse
import os

def get_all_files(path, keyWord):
    '''
    Hàm này nhận vào một đường dẫn và từ khóa, tìm tất cả các tệp trong thư mục đó và các thư mục con của nó.
    Nó sẽ trả về một danh sách chứa đường dẫn đầy đủ của tất cả các tệp có chứa từ khóa được chỉ định trong tên tệp.
    
    :param path: đường dẫn đến thư mục cần tìm kiếm
    :param keyWord: từ khóa để tìm kiếm trong tên tệp
    :return: danh sách chứa đường dẫn đầy đủ của tất cả các tệp có chứa từ khóa trong tên tệp
    '''
    files = []
    for root, dirs, filenames in os.walk(path):
        for filename in filenames:
            if keyWord in filename:
                files.append(os.path.join(root, filename))
    return files

def get_gen_passwords(gen_files, isNormal):
    '''
    Hàm này nhận vào danh sách các tệp mật khẩu được tạo ra và một tham số boolean để xác định phương pháp tạo mật khẩu.
    Nó sẽ đọc từng tệp và phân tích các mật khẩu được tạo ra theo phương pháp bình thường hoặc phương pháp khác.
    Nó sẽ trả về một danh sách chứa tất cả các mật khẩu được tạo ra.
    
    :param gen_files: danh sách các tệp mật khẩu được tạo ra
    :param isNormal: tham số boolean để xác định phương pháp tạo mật khẩu
    :return: danh sách chứa tất cả các mật khẩu được tạo ra
    '''
    gen_passwords = []
    for gen_file in gen_files:
        if isNormal:
            with open(gen_file, "r") as f:
                for line in f.readlines():
                    try:
                        gen_passwords.append(line.split(" ")[1])
                    except:
                        continue 
        else:
            with open(gen_file, "r") as f:
                gen_passwords += f.readlines()
    return gen_passwords

def get_hit_rate(test_file, gen_files, isNormal):
    '''
    Hàm này nhận vào đường dẫn đến tệp mật khẩu cần đánh giá và danh sách các tệp mật khẩu được tạo ra.
    Nó sẽ đọc các mật khẩu từ tệp đầu vào và so sánh với các mật khẩu được tạo ra.
    Nó sẽ tính toán tỷ lệ trúng (hit rate) bằng cách chia số lượng mật khẩu trùng khớp cho tổng số mật khẩu trong tệp đầu vào.
    
    :param test_file: đường dẫn đến tệp mật khẩu cần đánh giá
    :param gen_files: danh sách các tệp mật khẩu được tạo ra
    :param isNormal: tham số boolean để xác định phương pháp tạo mật khẩu
    :return: tỷ lệ trúng (hit rate)
    '''
    hit_num = 0
    gen_passwords = get_gen_passwords(gen_files, isNormal)
    gen_passwords = set(gen_passwords)

    with open(test_file, "r") as f:
        test_passwords = f.readlines()
    test_passwords = set(test_passwords)

    for password in gen_passwords:
        if password in test_passwords:
            hit_num += 1
    
    hit_rate = hit_num / len(test_passwords)
    return hit_rate

def get_repeat_rate(gen_files, isNormal):
    '''
    Hàm này nhận vào danh sách các tệp mật khẩu được tạo ra.
    Nó sẽ đọc tất cả các mật khẩu từ các tệp và tính toán tỷ lệ lặp lại (repeat rate) bằng cách chia số lượng mật khẩu trùng lặp cho tổng số mật khẩu được tạo ra.
    
    :param gen_files: danh sách các tệp mật khẩu được tạo ra
    :param isNormal: tham số boolean để xác định phương pháp tạo mật khẩu
    :return: tỷ lệ lặp lại (repeat rate)
    '''
    gen_passwords = get_gen_passwords(gen_files, isNormal)
    _gen_passwords = set(gen_passwords)
    repeat_rate = 1 - len(_gen_passwords) / len(gen_passwords)
    return repeat_rate

# Hàm đánh giá model cho web API
def evaluate_model(test_file_path, gen_path, is_normal):
    """
    Đánh giá hiệu suất model tạo mật khẩu
    
    Args:
        test_file_path (str): Đường dẫn đến file test
        gen_path (str): Đường dẫn đến thư mục chứa file generated
        is_normal (bool): True nếu là Normal mode, False nếu là DC mode
    
    Returns:
        dict: Kết quả đánh giá
    """
    try:
        print(f"evaluate_model called with: test_file_path={test_file_path}, gen_path={gen_path}, is_normal={is_normal}")
        
        # Kiểm tra file test tồn tại
        if not os.path.exists(test_file_path):
            return {'error': f'Test file not found: {test_file_path}'}
        
        # Kiểm tra thư mục gen_path tồn tại
        if not os.path.exists(gen_path):
            return {'error': f'Generated files path not found: {gen_path}'}
        
        keyWord = "Normal" if is_normal else "DC"
        print(f"Looking for files with keyword: {keyWord}")
        
        # Tìm tất cả files generated
        gen_files = []
        if os.path.exists(gen_path):
            for root, dirs, files in os.walk(gen_path):
                for file in files:
                    if keyWord.lower() in file.lower() and file.endswith('.txt'):
                        full_path = os.path.join(root, file)
                        gen_files.append(full_path)
                        print(f"Found generated file: {full_path}")
        
        print(f"Total generated files found: {len(gen_files)}")
        
        if not gen_files:
            return {'error': f'No {keyWord} generated files (.txt) found in {gen_path}'}
        
        # Read test passwords
        test_passwords = set()
        try:
            with open(test_file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    password = line.strip()
                    if password:
                        test_passwords.add(password)
        except Exception as e:
            return {'error': f'Error reading test file: {str(e)}'}
        
        print(f"Test passwords loaded: {len(test_passwords)}")
        
        if not test_passwords:
            return {'error': 'No valid passwords found in test file'}
        
        # Read generated passwords
        gen_passwords = []
        for gen_file in gen_files:
            try:
                with open(gen_file, 'r', encoding='utf-8') as f:
                    if is_normal:
                        for line in f:
                            try:
                                # Normal format: "probability password"
                                parts = line.strip().split(" ", 1)
                                if len(parts) >= 2:
                                    password = parts[1]
                                    if password:
                                        gen_passwords.append(password)
                            except:
                                continue
                    else:
                        for line in f:
                            password = line.strip()
                            if password:
                                gen_passwords.append(password)
            except Exception as e:
                print(f"Error reading {gen_file}: {e}")
                continue
        
        print(f"Generated passwords loaded: {len(gen_passwords)}")
        
        if not gen_passwords:
            return {'error': 'No generated passwords found in files'}
        
        # Calculate hit rate
        gen_set = set(gen_passwords)
        hits = len(test_passwords.intersection(gen_set))
        hit_rate = hits / len(test_passwords) if test_passwords else 0
        
        # Calculate repeat rate
        total_generated = len(gen_passwords)
        unique_generated = len(gen_set)
        repeat_rate = 1 - unique_generated / total_generated if total_generated > 0 else 0
        
        # Sample matches
        sample_matches = list(test_passwords.intersection(gen_set))[:20]
        
        print(f"Results - Hit rate: {hit_rate:.4f}, Repeat rate: {repeat_rate:.4f}")
        
        return {
            'hit_rate': hit_rate,
            'repeat_rate': repeat_rate,
            'details': {
                'total_test_passwords': len(test_passwords),
                'total_generated_passwords': total_generated,
                'unique_generated': unique_generated,
                'hits': hits,
                'repeats': total_generated - unique_generated,
                'files_processed': len(gen_files)
            },
            'sample_matches': sample_matches
        }
    
    except Exception as e:
        print(f"Exception in evaluate_model: {str(e)}")
        return {'error': str(e)}

# Phần chạy script gốc (chỉ chạy khi file được chạy trực tiếp)
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--test_file", help="file of test set", type=str, required=True)
    parser.add_argument("--gen_path", help="path of generated password", type=str, required=True)
    parser.add_argument("--isNormal", action="store_true", help="whether the generated password is in normal method")
    args = parser.parse_args()

    if args.isNormal:
        keyWord = "Normal"
    else:
        keyWord = "DC"

    gen_files = get_all_files(args.gen_path, keyWord)
    hit_rate = get_hit_rate(args.test_file, gen_files, args.isNormal)
    repeat_rate = get_repeat_rate(gen_files, args.isNormal)
    print("Hit Rate: ", hit_rate)
    print("Repeat Rate: ", repeat_rate)
